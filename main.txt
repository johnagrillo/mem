int main() {
  GifImage gif = getGif();
  return 0;
}

push    rbp                    ; Save caller's base pointer
mov     rbp, rsp               ; Set current base pointer to stack pointer (start new frame)
push    rbx                    ; Save callee-saved register rbx
sub     rsp, 24                ; Allocate 24 bytes for local variables (GifImage storage)
lea     rax, [rbp-32]          ; Load address of local GifImage object into rax
mov     rdi, rax               ; Move address into rdi (first argument for call)
call    getGif()               ; Call getGif() to initialize GifImage at that address
mov     ebx, 0                 ; Initialize ebx to zero (used as return value or flag)
lea     rax, [rbp-32]          ; Load address of local GifImage again for destructor
mov     rdi, rax               ; Pass address in rdi for destructor call
call    GifImage::~GifImage()  ; Call destructor to clean up resources
mov     eax, ebx               ; Move return value (0) into eax for function return
mov     rbx, QWORD PTR [rbp-8] ; Restore saved rbx value from stack
leave                         ; Restore rsp and rbp to caller's frame (mov rsp, rbp; pop rbp)
ret                           ; Return to caller


High addresses ↑
+-----------------+
| return address  |
+-----------------+----------------------------------  rbp
| caller rbp      | ← rbp points here initially
+-----------------+
| saved rbp       | ← pushed by this function
+-----------------+
| saved rbx       | ← pushed by this function
+-----------------+  
| padding (8 B)   | maybe alignment
| size   (8 B)    |
| buffer (8 B)    | ← -32 32 bytes reserved by `sub rsp, 24`


tack offset	Size (bytes)	Stored value

rbp + 8	     8	Return address
rbp          8	Saved rbp
rbp - 8	     8	Saved rbx

rbp - 16     8	Padding/alignment
rbp - 24     8	Img.size (6)
rbp - 32     8	Img.buffer pointer (heap ptr)






